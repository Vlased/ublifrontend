{"version":3,"sources":["../src/preview.ts","../src/withI18Next.tsx","../node_modules/@storybook/client-api/dist/entry.mjs"],"names":["i18n","React","Fragment","entry_exports","__reExport","client_api_star","I18nextProvider","withI18Next","story","context","language","locale","key","setKey","i18nDecorators","preview","preview_default"],"mappings":"wWACA,OAAOA,MAAU,yBCDjB,OAAOC,GAAQ,YAAAC,MAA0B,QCAzC,IAAAC,EAAA,GACAC,EAAAD,EAAAE,GAAA,UAAAA,MAAc,yCDMd,OAAQ,mBAAAC,MAAsB,gBAEvB,IAAMC,EAAc,CACvBC,EACAC,IACC,CACD,GAAM,CACF,WAAY,CAAC,KAAAT,CAAI,CACrB,EAAIS,EAEEC,EAAWV,GAAM,SAEjB,CAAC,CAAC,OAAAW,CAAM,CAAC,KAAI,cAAW,EACxB,CAACC,EAAKC,CAAM,KAAI,YAAS,CAAC,EAEhC,sBAAU,IAAM,CACZ,GAAIb,EACA,OAAAA,EAAK,GAAG,kBAAmB,IAAM,CAC7Ba,EAAO,KAAK,IAAI,CAAC,CACrB,CAAC,EACM,IAAMb,EAAK,IAAI,iBAAiB,CAE/C,EAAG,CAACA,CAAI,CAAC,KAET,aAAU,IAAM,CACRA,GAAQW,GAAUD,GAAYC,IAAWD,GACzCV,EAAK,eAAeW,CAAM,CAElC,EAAG,CAACD,EAAUC,EAAQX,CAAI,CAAC,EAGvBC,EAAA,cAACC,EAAA,CAAS,IAAKU,GACXX,EAAA,cAACK,EAAA,CAAgB,KAAMN,GAClBQ,EAAMC,CAAO,CAClB,CACJ,CAER,EDvCA,IAAMK,EAAiBd,EAAK,YAAc,CAAC,EAErCe,EAAwC,CAC1C,GAAGf,EACH,WAAY,CAAC,GAAGc,EAAgBP,CAAW,CAC/C,EAEOS,EAAQD","sourcesContent":["import type {Renderer, ProjectAnnotations} from '@storybook/types';\nimport i18n from 'storybook-i18n/preview';\nimport {withI18Next} from './withI18Next';\n\n// @ts-ignore\nconst i18nDecorators = i18n.decorators || [];\n\nconst preview: ProjectAnnotations<Renderer> = {\n    ...i18n,\n    decorators: [...i18nDecorators, withI18Next],\n};\n\nexport default preview;\n","import React, {Fragment, ReactNode} from 'react';\nimport {useEffect, useGlobals, useState} from '@storybook/client-api';\nimport {\n    PartialStoryFn as StoryFunction,\n    Renderer,\n    StoryContext,\n} from '@storybook/types';\nimport {I18nextProvider} from 'react-i18next';\n\nexport const withI18Next = (\n    story: StoryFunction<Renderer>,\n    context: StoryContext\n) => {\n    const {\n        parameters: {i18n},\n    } = context;\n\n    const language = i18n?.language;\n\n    const [{locale}] = useGlobals();\n    const [key, setKey] = useState(0);\n\n    useEffect(() => {\n        if (i18n) {\n            i18n.on('languageChanged', () => {\n                setKey(Date.now());\n            });\n            return () => i18n.off('languageChanged');\n        }\n    }, [i18n]);\n\n    useEffect(() => {\n        if (i18n && locale && language && locale !== language) {\n            i18n.changeLanguage(locale);\n        }\n    }, [language, locale, i18n]);\n\n    return (\n        <Fragment key={key}>\n            <I18nextProvider i18n={i18n}>\n                {story(context) as ReactNode | null}\n            </I18nextProvider>\n        </Fragment>\n    );\n};\n","// shim-mmode\nexport * from '@storybook/preview-api/dist/client-api';"]}