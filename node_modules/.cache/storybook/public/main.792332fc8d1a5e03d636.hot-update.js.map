{"version":3,"file":"main.792332fc8d1a5e03d636.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAGA;AAEA","sources":["webpack://ulbi/./src/features/AuthByUsername/ui/LoginForm/LoginForm.tsx"],"sourcesContent":["import { loginActions } from \"../../model/slice/loginSlice\";\nimport { memo, useCallback } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useSelector } from \"react-redux\";\nimport { Button, ButtonTheme } from \"shared/ui/Button/Button\";\nimport { Input } from \"shared/ui/Input/Input\";\nimport styles from './LoginForm.module.scss';\nimport { getLoginState } from \"../../model/selectors/getLoginState\";\nimport { loginByUsername } from \"../../model/services/loginByUsername/loginByUsername\";\nimport { useAppDispatch } from \"shared/lib/hooks/useAppDispatch\";\nimport { Text, TextTheme } from \"shared/ui/Text/Text\";\n\nconst LoginForm = memo(() => {\n  const { t } = useTranslation();\n  const dispatch = useAppDispatch();\n  const { username, password, error, isLoading } = useSelector(getLoginState);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    dispatch(loginActions.setUsername(value));\n  }, [dispatch])\n\n  const handlePasswordChange = useCallback((value: string) => {\n    dispatch(loginActions.setPassword(value));\n  }, [dispatch])\n\n  const handleLoginClick = useCallback(() => {\n    dispatch(loginByUsername({ username, password }))\n  }, [dispatch, username, password])\n\n  return (\n    <div className={styles.loginForm}>\n      <Text title=\"Authorization\" />\n      <Input \n        type=\"text\" \n        value={username}\n        onChange={handleUsernameChange}\n        placeholder={t('Username')}\n        autoFocus\n      />\n      <Input \n        type=\"text\" \n        value={password}\n        onChange={handlePasswordChange}\n        placeholder={t('Password')}\n      />\n      {error && <Text theme={TextTheme.ERROR}>{error}</Text>}\n      <Button\n        theme={ButtonTheme.OUTLINED}\n        className={styles.loginButton}\n        onClick={handleLoginClick}\n        disabled={isLoading}\n      >\n        {t('Enter')}\n      </Button>\n    </div>\n  )\n})\n\nexport default LoginForm"],"names":[],"sourceRoot":""}