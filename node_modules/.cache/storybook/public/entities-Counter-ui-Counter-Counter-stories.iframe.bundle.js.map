{"version":3,"file":"entities-Counter-ui-Counter-Counter-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;ACFA;AAEA;AAEA;AAEA;AAAA;;;;;;;;;;;;;;;;ACNA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAGA;AAEA;AACA;AAAA;AAGA;AAAA;AAGA;AA7BA","sources":["webpack://ulbi/./src/entities/Counter/model/selectors/getCounter/getCounter.ts","webpack://ulbi/./src/entities/Counter/model/selectors/getCounterValue/getCounterValue.ts","webpack://ulbi/./src/entities/Counter/model/slice/counterSlice.ts","webpack://ulbi/./src/entities/Counter/ui/Counter/Counter.tsx"],"sourcesContent":["import { StateSchema } from 'app/providers/StoreProvider'\n\nexport const getCounter = (state: StateSchema) => state.counter\n","import { createSelector } from '@reduxjs/toolkit'\nimport { CounterSchema } from '../../types/counterSchema'\nimport { getCounter } from '../getCounter/getCounter'\n\nexport const getCounterValue = createSelector(\n  getCounter,\n  (counter: CounterSchema) => counter.value\n)\n","import { createSlice } from '@reduxjs/toolkit'\nimport { CounterSchema } from '../types/counterSchema'\n\nconst initialState: CounterSchema = {\n  value: 0\n}\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: state => {\n      state.value += 1\n    },\n    decrement: state => {\n      state.value -= 1\n    }\n  }\n})\n\nexport const {\n  actions: counterActions,\n  reducer: counterReducer\n} = counterSlice\n","import { useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Button } from 'shared/ui/Button/Button'\nimport { getCounterValue } from '../../model/selectors/getCounterValue/getCounterValue'\nimport { counterActions } from '../../model/slice/counterSlice'\n\nexport const Counter = () => {\n  const counterValue = useSelector(getCounterValue)\n  const dispatch = useDispatch()\n\n  const increment = useCallback(() => {\n    dispatch(counterActions.increment())\n  }, [dispatch])\n\n  const decrement = useCallback(() => {\n    dispatch(counterActions.decrement())\n  }, [dispatch])\n\n  return (\n    <div>\n      <h1 data-testid=\"value-title\">value = {counterValue}</h1>\n      <Button\n        onClick={increment}\n        data-testid=\"increment-button\"\n      >\n        increment\n      </Button>\n      <Button\n        onClick={decrement}\n        data-testid=\"decrement-button\"\n      >\n        decrement\n      </Button>\n    </div>\n  )\n}\n\n"],"names":[],"sourceRoot":""}