{"version":3,"file":"src_shared_ui_Input_Input_tsx.7581ebfbca0416578fc7.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAAA;AAAA;AAWA;AAQA;AANA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AACA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAGA;AAEA","sources":["webpack://ulbi/./src/shared/ui/Input/Input.tsx"],"sourcesContent":["import React, { InputHTMLAttributes, memo, useCallback, useEffect, useRef, useState } from 'react'\nimport { classNames } from 'shared/lib/classNames/classNames'\nimport styles from './Input.module.scss'\n\ntype HTMLInputProps = Omit<InputHTMLAttributes<HTMLInputElement>, 'value' | 'onChange'>\n\ninterface InputProps {\n  className?: string\n  value?: string\n  onChange?: (value: string) => void\n  autoFocus?: boolean\n}\n\nexport const Input: React.FC<InputProps & HTMLInputProps> = memo(({\n  className,\n  value,\n  onChange,\n  placeholder,\n  type = 'text',\n  autoFocus,\n  ...props\n}) => {\n  const [isFocused, setIsFocused] = useState<boolean>(false)\n  const [caretPosition, setCaretPosition] = useState<number>(0)\n  const ref = useRef<HTMLInputElement>(null)\n\n  useEffect(() => {\n    if (autoFocus) {\n      setIsFocused(true)\n      ref.current?.focus()\n    }\n  }, [autoFocus])\n\n  const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onChange?.(e.target.value)\n    setCaretPosition(e.target.value.length)\n  }, [onChange])\n\n  const onBlur = useCallback(() => {\n    setIsFocused(false)\n  }, [])\n\n  const onFocus = useCallback(() => {\n    setIsFocused(true)\n  }, [])\n\n  const onSelect = useCallback((e: any) => {\n    setCaretPosition(e?.target?.selectionStart || 0)\n  }, [])\n\n  return (\n    <div className={styles.inputContainer}>\n      {placeholder && (\n        <div className={styles.placeholder}>\n          {`${placeholder}>`}\n        </div>\n      )}\n      <div className={styles.caretWrapper}>\n        <input\n          className={classNames([className, styles.input])}\n          type={type}\n          value={value}\n          onChange={handleChange}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          onSelect={onSelect}\n          {...props}\n        />\n        {isFocused && (\n          <span\n            className={styles.caret}\n            style={{ left: `${caretPosition * 9 * 9 / 10}px` }}\n          />\n        )}\n      </div>\n    </div>\n  )\n})\n\nInput.displayName = 'Input'\n"],"names":[],"sourceRoot":""}