{"version":3,"file":"src_pages_ProfilePage_ui_ProfilePage_tsx.4200c39dbd7b48a589f2.hot-update.js","mappings":";;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAGA;AAEA;AAEA;AACA;AAAA;AAGA;AAEA;AAAA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAEA","sources":["webpack://ulbi/./src/pages/ProfilePage/model/selectors/getProfileValidateErrors/getProfileValidateErrors.ts","webpack://ulbi/./src/pages/ProfilePage/ui/ProfilePage.tsx"],"sourcesContent":["import { StateSchema } from 'app/providers/StoreProvider'\n\nexport const getProfileValidateErrors = (state: StateSchema) => state.profile?.validateErrors\n","import { fetchProfileData } from '../model/services/fetchProfileData/fetchProfileData'\nimport { memo, useCallback, useEffect } from 'react'\nimport DynamicModuleLoader, { ReducersList } from 'shared/lib/components/DynamicModuleLoader/DynamicModuleLoader'\nimport { useAppDispatch } from 'shared/lib/hooks/useAppDispatch'\nimport { useSelector } from 'react-redux'\nimport { getProfileError } from '../model/selectors/getProfileError/getProfileError'\nimport { getProfileLoading } from '../model/selectors/getProfileLoading/getProfileLoading'\nimport ProfilePageHeader from './ProfilePageHeader/ProfilePageHeader'\nimport { getProfileReadonly } from '../model/selectors/getProfileReadonly/getProfileReadonly'\nimport { getProfileForm } from '../model/selectors/getProfileForm/getProfileForm'\nimport { profileActions, profileReducer } from '../model/slice/profileSlice'\nimport { ProfileCard } from '../../../entities/Profile'\nimport { Currency } from 'entities/Currency'\nimport { Country } from 'entities/Country'\nimport { getProfileValidateErrors } from '../model/selectors/getProfileValidateErrors/getProfileValidateErrors'\nimport { Text, TextTheme } from 'shared/ui/Text/Text'\nimport { ValidateProfileErrors } from '../model/types/profile'\nimport { useTranslation } from 'react-i18next'\n\nconst reducers: ReducersList = {\n  profile: profileReducer\n}\n\nconst ProfilePage = memo(() => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const formData = useSelector(getProfileForm)\n  const error = useSelector(getProfileError)\n  const validateErrors = useSelector(getProfileValidateErrors)\n  const isLoading = useSelector(getProfileLoading)\n  const readonly = useSelector(getProfileReadonly)\n\n  const validateErrorsTranslates = {\n    [ValidateProfileErrors.SERVER_ERROR]: t('Unknown Server Error Happened'),\n    [ValidateProfileErrors.NO_PROFILE_DATA]: t('No Profile Data Provided'),\n    [ValidateProfileErrors.INCORRECT_USER_DATA]: t('Incorrect FirstName or LastName'),\n    [ValidateProfileErrors.INCORRECT_USER_COUNTRY]: t('Incorrect Country'),\n    [ValidateProfileErrors.INCORRECT_USER_AGE]: t('Incorrect Age')\n  }\n\n  const handleFirstNameChange = useCallback((value?: string) => {\n    dispatch(profileActions.updateProfile({ firstName: value }))\n  }, [dispatch])\n\n  const handleLastNameChange = useCallback((value?: string) => {\n    dispatch(profileActions.updateProfile({ lastName: value }))\n  }, [dispatch])\n\n  const handleAgeChange = useCallback((value?: string) => {\n    dispatch(profileActions.updateProfile({ age: Number(value) }))\n  }, [dispatch])\n\n  const handleCityChange = useCallback((value?: string) => {\n    dispatch(profileActions.updateProfile({ city: value }))\n  }, [dispatch])\n\n  const handleUsernameChange = useCallback((value?: string) => {\n    dispatch(profileActions.updateProfile({ username: value }))\n  }, [dispatch])\n\n  const handleAvatarChange = useCallback((value?: string) => {\n    dispatch(profileActions.updateProfile({ avatar: value }))\n  }, [dispatch])\n\n  const handleCurrencyChange = useCallback((value?: Currency) => {\n    dispatch(profileActions.updateProfile({ currency: value }))\n  }, [dispatch])\n\n  const handleCountryChange = useCallback((value?: Country) => {\n    dispatch(profileActions.updateProfile({ country: value }))\n  }, [dispatch])\n\n  useEffect(() => {\n    if (PROJECT !== 'storybook') {\n      dispatch(fetchProfileData())\n    }\n  }, [dispatch])\n\n  return (\n    <DynamicModuleLoader\n      reducers={reducers}\n      removeAfterUnmount\n    >\n      <ProfilePageHeader />\n      {validateErrors?.map((validateError) => (\n        <Text\n          theme={TextTheme.ERROR}\n          key={validateError}\n        >\n          {validateErrorsTranslates[validateError]}\n        </Text>\n      ))}\n      <ProfileCard\n        formData={formData}\n        error={error}\n        isLoading={isLoading}\n        readonly={readonly}\n        handleFirstNameChange={handleFirstNameChange}\n        handleLastNameChange={handleLastNameChange}\n        handleAgeChange={handleAgeChange}\n        handleCityChange={handleCityChange}\n        handleUsernameChange={handleUsernameChange}\n        handleAvatarChange={handleAvatarChange}\n        handleCurrencyChange={handleCurrencyChange}\n        handleCountryChange={handleCountryChange}\n      />\n    </DynamicModuleLoader>\n  )\n})\n\nexport default ProfilePage\n"],"names":[],"sourceRoot":""}