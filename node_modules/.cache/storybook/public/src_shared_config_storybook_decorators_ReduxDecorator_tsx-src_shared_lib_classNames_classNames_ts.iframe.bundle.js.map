{"version":3,"file":"src_shared_config_storybook_decorators_ReduxDecorator_tsx-src_shared_lib_classNames_classNames_ts.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACrCA;AACA;AAEA;AACA;AAGA;AAKA;AAEA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;ACpCA;AAEA;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AAEA;AAAA;AAQA;AAAA;AAAA;AAAA;AACA;AAEA;AAMA;AACA;AAAA;AACA;AAGA;AAdA;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7BA;;;;;;;;;;;;;;;ACEA;AAAA;AAAA;;;;;;;;;;;;;;;;;ACFA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;AC3BA;AAAA;AAAA;AADA;AACA;AACA;AAQA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AC/BA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;;;;;ACvCA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AAAA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;;;ACpBA;;;;;;;;;;;;;;;;;;;;;;;;ACEA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA","sources":["webpack://ulbi/./src/app/providers/StoreProvider/config/reducerManager.ts","webpack://ulbi/./src/app/providers/StoreProvider/config/store.ts","webpack://ulbi/./src/app/providers/StoreProvider/index.ts","webpack://ulbi/./src/app/providers/StoreProvider/ui/StoreProvider.tsx","webpack://ulbi/./src/entities/User/index.ts","webpack://ulbi/./src/entities/User/model/selectors/getAuthData.ts","webpack://ulbi/./src/entities/User/model/slice/userSlice.ts","webpack://ulbi/./src/features/AuthByUsername/model/services/loginByUsername/loginByUsername.ts","webpack://ulbi/./src/features/AuthByUsername/model/slice/loginSlice.ts","webpack://ulbi/./src/shared/api/api.ts","webpack://ulbi/./src/shared/config/storybook/decorators/ReduxDecorator.tsx","webpack://ulbi/./src/shared/constants/localStorage.ts","webpack://ulbi/./src/shared/lib/classNames/classNames.ts"],"sourcesContent":["import { AnyAction, combineReducers, ReducersMapObject, Reducer } from '@reduxjs/toolkit'\nimport { ReducerManager, StateSchema, StateSchemaKey } from './StateSchema'\n\nexport function createReducerManager (initialReducers: ReducersMapObject<StateSchema>): ReducerManager {\n  const reducers = { ...initialReducers }\n  let combinedReducer = combineReducers(reducers)\n  let keysToRemove: StateSchemaKey[] = []\n\n  return {\n    getReducerMap: () => reducers,\n    reduce: (state: StateSchema, action: AnyAction) => {\n      if (keysToRemove.length > 0) {\n        state = { ...state }\n        keysToRemove.forEach((key) => {\n          delete state[key]\n        })\n        keysToRemove = []\n      }\n\n      return combinedReducer(state, action)\n    },\n    add: (key: StateSchemaKey, reducer: Reducer) => {\n      if (!key || reducers[key]) {\n        return\n      }\n      reducers[key] = reducer\n      combinedReducer = combineReducers(reducers)\n    },\n    remove: (key: StateSchemaKey) => {\n      if (!key || !reducers[key]) {\n        return\n      }\n      delete reducers[key]\n      keysToRemove.push(key)\n      combinedReducer = combineReducers(reducers)\n    }\n  }\n}\n","import { CombinedState, configureStore, Reducer, ReducersMapObject } from '@reduxjs/toolkit'\nimport { userReducer } from '../../../../entities/User'\nimport { StateSchema } from './StateSchema'\nimport { createReducerManager } from './reducerManager'\nimport { $api } from 'shared/api/api'\nimport { NavigateFunction } from 'react-router-dom'\n\nexport const createReduxStore = (\n  initialState?: StateSchema,\n  asyncReducers?: ReducersMapObject<StateSchema>,\n  navigate?: NavigateFunction\n) => {\n  const rootReducers: ReducersMapObject<StateSchema> = {\n    ...asyncReducers,\n    user: userReducer\n  }\n\n  const reducerManager = createReducerManager(rootReducers)\n\n  const store = configureStore({\n    reducer: reducerManager.reduce as Reducer<CombinedState<StateSchema>>,\n    devTools: IS_DEV,\n    preloadedState: initialState,\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware({\n      thunk: {\n        extraArgument: {\n          api: $api,\n          navigate\n        }\n      }\n    })\n  })\n  // @ts-expect-error some description idk\n  store.reducerManager = reducerManager\n\n  return store\n}\n\nexport type AppDispatch = ReturnType<typeof createReduxStore>['dispatch']\n","import StoreProvider from './ui/StoreProvider'\n\nexport { createReduxStore, type AppDispatch } from './config/store'\nexport type { StateSchema, StateSchemaKey, ThunkConfig } from './config/StateSchema'\nexport type { ReduxStoreWithManager } from './config/StateSchema'\nexport { StoreProvider }\n","import { ReducersMapObject } from '@reduxjs/toolkit'\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { useNavigate } from 'react-router-dom'\nimport { StateSchema } from '../config/StateSchema'\nimport { createReduxStore } from '../config/store'\n\ninterface StoreProviderProps {\n  children?: React.ReactNode\n  initialState?: DeepPartial<StateSchema>\n  asyncReducers?: DeepPartial<ReducersMapObject<StateSchema>>\n}\n\nconst StoreProvider: React.FC<StoreProviderProps> = ({ children, initialState, asyncReducers }) => {\n  const navigate = useNavigate()\n\n  const store = createReduxStore(\n    initialState as StateSchema,\n    asyncReducers as ReducersMapObject<StateSchema>,\n    navigate\n  )\n\n  return (\n    <Provider store={store}>\n      {children}\n    </Provider>\n  )\n}\n\nexport default StoreProvider\n","export { userActions, userReducer } from './model/slice/userSlice'\nexport type { User, UserSchema } from './model/types/userSchema'\nexport { getAuthData } from './model/selectors/getAuthData'\n","import { StateSchema } from 'app/providers/StoreProvider'\n\nexport const getAuthData = (state: StateSchema) => state.user.authData\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { USER_KEY } from 'shared/constants/localStorage'\nimport { User, UserSchema } from '../../../../entities/User/model/types/userSchema'\n\nconst initialState: UserSchema = {}\n\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    setAuthData: (state, { payload }: PayloadAction<User>) => {\n      state.authData = payload\n    },\n    initAuthData: (state) => {\n      const user = localStorage.getItem(USER_KEY)\n      if (user) {\n        state.authData = JSON.parse(user)\n      }\n    },\n    clearAuthData: (state) => {\n      state.authData = undefined\n      localStorage.removeItem(USER_KEY)\n    }\n  }\n})\n\nexport const {\n  actions: userActions,\n  reducer: userReducer\n} = userSlice\n","import { createAsyncThunk } from '@reduxjs/toolkit'\nimport { User, userActions } from '../../../../../entities/User'\nimport { USER_KEY } from 'shared/constants/localStorage'\nimport { ThunkConfig } from 'app/providers/StoreProvider'\n\ninterface LoginByUsernameProps {\n  username: string\n  password: string\n}\n\nexport const loginByUsername = createAsyncThunk<User, LoginByUsernameProps, ThunkConfig<string>>(\n  'login/loginByUsername',\n  async (authData, { extra, dispatch, rejectWithValue }) => {\n    try {\n      const response = await extra.api.post<User>('/login', authData)\n\n      if (!response.data) {\n        throw new Error('error')\n      }\n\n      localStorage.setItem(USER_KEY, JSON.stringify(response.data))\n      dispatch(userActions.setAuthData(response.data))\n\n      if (extra.navigate) {\n        extra.navigate('/profile')\n      }\n\n      return response.data\n    } catch (e) {\n      return rejectWithValue('Incorrect email or password')\n    }\n  }\n)\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { loginByUsername } from '../services/loginByUsername/loginByUsername'\nimport { LoginSchema } from '../types/loginSchema'\n\nexport const initialState: LoginSchema = {\n  isLoading: false,\n  username: '',\n  password: ''\n}\n\nconst loginSlice = createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    setUsername: (state, { payload }: PayloadAction<string>) => {\n      state.username = payload\n    },\n    setPassword: (state, { payload }: PayloadAction<string>) => {\n      state.password = payload\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(loginByUsername.pending, (state, action) => {\n        state.error = undefined\n        state.isLoading = true\n      })\n      .addCase(loginByUsername.fulfilled, (state, action) => {\n        state.isLoading = false\n      })\n      .addCase(loginByUsername.rejected, (state, action) => {\n        state.isLoading = false\n        state.error = action.payload\n      })\n  }\n})\n\nexport const {\n  actions: loginActions,\n  reducer: loginReducer\n} = loginSlice\n","import axios from 'axios'\nimport { USER_KEY } from 'shared/constants/localStorage'\n\nexport const $api = axios.create({\n  baseURL: API,\n  headers: {\n    authorization: localStorage.getItem(USER_KEY)\n  }\n})\n","import { ReducersMapObject } from '@reduxjs/toolkit'\nimport { StoryFn } from '@storybook/react'\nimport { StateSchema, StoreProvider } from 'app/providers/StoreProvider'\nimport { loginReducer } from 'features/AuthByUsername/model/slice/loginSlice'\nimport { ReducersList } from 'shared/lib/components/DynamicModuleLoader/DynamicModuleLoader'\n\nconst defaultAsyncReducers: ReducersList = {\n  loginForm: loginReducer\n}\n\nexport const ReduxDecorator = (\n  state?: DeepPartial<StateSchema>,\n  asyncReducers?: DeepPartial<ReducersMapObject<StateSchema>>\n) => (Story: StoryFn) => (\n  <StoreProvider\n    initialState={state}\n    asyncReducers={{ ...defaultAsyncReducers, ...asyncReducers }}\n  >\n    <Story />\n  </StoreProvider>\n)\n","export const USER_KEY = 'user'\n","export type Mods = Record<string, boolean | undefined>\n\nexport const classNames = (classes: Array<string | undefined>, mods: Mods = {}): string => {\n  const mainClasses = classes.filter(Boolean)\n\n  const modsClasses = Object.entries(mods)\n    .filter(([className, value]) => Boolean(value))\n    .map(([className]) => className)\n\n  return [...mainClasses, ...modsClasses].join(' ')\n}\n"],"names":[],"sourceRoot":""}