{"version":3,"file":"main.bca4f95568029ac4914b.hot-update.js","mappings":";;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;ACDA;AAAA;AAAA;AADA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;ACZA;AAAA;AAAA;AADA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;ACvBA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;;;AC7DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA","sources":["webpack://ulbi/./src/pages/ProfilePage/model/selectors/getProfileForm/getProfileForm.ts","webpack://ulbi/./src/pages/ProfilePage/model/services/fetchProfileData/fetchProfileData.ts","webpack://ulbi/./src/pages/ProfilePage/model/services/updateProfileData/updateProfileData.ts","webpack://ulbi/./src/pages/ProfilePage/model/services/validateProfile/validateProfile.ts","webpack://ulbi/./src/pages/ProfilePage/model/slice/profileSlice.ts","webpack://ulbi/./src/pages/ProfilePage/model/types/profile.ts","webpack://ulbi/./src/shared/config/storybook/decorators/ReduxDecorator.tsx"],"sourcesContent":["import { StateSchema } from 'app/providers/StoreProvider'\n\nexport const getProfileForm = (state: StateSchema) => state.profile?.form\n","import { createAsyncThunk } from '@reduxjs/toolkit'\nimport { ThunkConfig } from 'app/providers/StoreProvider'\nimport { Profile } from '../../types/profile'\n\nexport const fetchProfileData = createAsyncThunk<Profile, void, ThunkConfig<string>>(\n  'profile/fetchProfileData',\n  async (_, { extra, rejectWithValue }) => {\n    try {\n      const response = await extra.api.get<Profile>('/profile')\n      return response.data\n    } catch (e) {\n      return rejectWithValue('Some weird error happened')\n    }\n  }\n)\n","import { createAsyncThunk } from '@reduxjs/toolkit'\nimport { ThunkConfig } from 'app/providers/StoreProvider'\nimport { getProfileForm } from '../../selectors/getProfileForm/getProfileForm'\nimport { Profile, ValidateProfileErrors } from '../../types/profile'\nimport { validateProfile } from '../validateProfile/validateProfile'\n\nexport const updateProfileData = createAsyncThunk<Profile, void, ThunkConfig<ValidateProfileErrors[]>>(\n  'profile/updateProfileData',\n  async (_, { extra, rejectWithValue, getState }) => {\n    try {\n      const formData = getProfileForm(getState())\n\n      const errors = validateProfile(formData);\n\n      if(errors.length) {\n        return rejectWithValue(errors)\n      }\n\n      const response = await extra.api.put<Profile>('/profile', formData)\n      return response.data\n    } catch (e) {\n      return rejectWithValue([ValidateProfileErrors.SERVER_ERROR])\n    }\n  }\n)\n","import { Profile, ValidateProfileErrors } from \"../../types/profile\";\n\nexport const validateProfile = (profile?: Profile) => {\n  if(!profile) {\n    return [ValidateProfileErrors.NO_PROFILE_DATA]\n  }\n\n  const { firstName, lastName, age, country } = profile;\n  const errors: ValidateProfileErrors[] = [];\n\n  if(!firstName || !lastName) {\n    errors.push(ValidateProfileErrors.INCORRECT_USER_DATA)\n  }\n\n  if(!age || !Number.isInteger(age)) {\n    errors.push(ValidateProfileErrors.INCORRECT_USER_AGE)\n  }\n\n  if(!country) {\n    errors.push(ValidateProfileErrors.INCORRECT_USER_COUNTRY)\n  }\n\n  return errors;\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { fetchProfileData } from '../services/fetchProfileData/fetchProfileData'\nimport { updateProfileData } from '../services/updateProfileData/updateProfileData'\nimport { Profile, ProfileSchema } from '../types/profile'\n\nconst initialState: ProfileSchema = {\n  readonly: true,\n  isLoading: false\n}\n\nconst profileSlice = createSlice({\n  name: 'profile',\n  initialState,\n  reducers: {\n    setReadonly: (state, action: PayloadAction<boolean>) => {\n      state.readonly = action.payload\n    },\n    cancelEdit: (state) => {\n      state.readonly = true\n      state.form = state.data\n      state.validateErrors = undefined;\n    },\n    updateProfile: (state, action: PayloadAction<Profile>) => {\n      state.form = {\n        ...state.form,\n        ...action.payload\n      }\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchProfileData.pending, (state) => {\n        state.error = undefined\n        state.isLoading = true\n      })\n      .addCase(fetchProfileData.fulfilled, (state, action) => {\n        state.isLoading = false\n        state.data = action.payload\n        state.form = action.payload\n      })\n      .addCase(fetchProfileData.rejected, (state, action) => {\n        state.isLoading = false\n        state.error = action.payload\n      })\n      .addCase(updateProfileData.pending, (state) => {\n        state.error = undefined\n        state.isLoading = true\n      })\n      .addCase(updateProfileData.fulfilled, (state, action) => {\n        state.isLoading = false\n        state.data = action.payload\n        state.form = action.payload\n        state.readonly = true\n        state.validateErrors = undefined\n      })\n      .addCase(updateProfileData.rejected, (state, action) => {\n        state.isLoading = false\n        state.validateErrors = action.payload\n      })\n  }\n})\n\nexport const {\n  actions: profileActions,\n  reducer: profileReducer\n} = profileSlice\n","import { Country } from 'entities/Country'\nimport { Currency } from 'entities/Currency'\n\nexport enum ValidateProfileErrors {\n  SERVER_ERROR = 'SERVER_ERROR',\n  NO_PROFILE_DATA = 'NO_PROFILE_DATA',\n  INCORRECT_USER_DATA = 'INCORRECT_USER_DATA',\n  INCORRECT_USER_AGE = 'INCORRECT_USER_AGE',\n  INCORRECT_USER_COUNTRY = 'INCORRECT_USER_COUNTRY',\n}\n\nexport interface Profile {\n  firstName?: string\n  lastName?: string\n  age?: number\n  currency?: Currency\n  country?: Country\n  city?: string\n  username?: string\n  avatar?: string\n}\n\nexport interface ProfileSchema {\n  data?: Profile\n  form?: Profile\n  isLoading: boolean\n  error?: string\n  readonly: boolean\n  validateErrors?: ValidateProfileErrors[]\n}\n","import { ReducersMapObject } from '@reduxjs/toolkit'\nimport { StoryFn } from '@storybook/react'\nimport { StateSchema, StoreProvider } from 'app/providers/StoreProvider'\nimport { loginReducer } from 'features/AuthByUsername/model/slice/loginSlice'\nimport { profileReducer } from 'pages/ProfilePage/model/slice/profileSlice'\nimport { ReducersList } from 'shared/lib/components/DynamicModuleLoader/DynamicModuleLoader'\n\nconst defaultAsyncReducers: ReducersList = {\n  loginForm: loginReducer,\n  profile: profileReducer,\n}\n\nexport const ReduxDecorator = (\n  state?: DeepPartial<StateSchema>,\n  asyncReducers?: DeepPartial<ReducersMapObject<StateSchema>>\n) => (Story: StoryFn) => (\n  <StoreProvider\n    initialState={state}\n    asyncReducers={{ ...defaultAsyncReducers, ...asyncReducers }}\n  >\n    <Story />\n  </StoreProvider>\n)\n"],"names":[],"sourceRoot":""}