{"version":3,"file":"src_shared_ui_Modal_Modal_tsx.b6fa155ec752e5520877.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;AAUA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AAtDA","sources":["webpack://ulbi/./src/shared/ui/Modal/Modal.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { classNames } from 'shared/lib/classNames/classNames'\nimport Portal from '../Portal/Portal'\nimport styles from './Modal.module.scss'\n\ninterface ModalProps {\n  className?: string;\n  children: React.ReactNode;\n  isOpen?: boolean;\n  onClose?: () => void;\n  withPortal?: boolean; \n}\n\nconst CLOSING_DELAY = 150\n\nexport const Modal: React.FC<ModalProps> = ({ className, children, isOpen, onClose, withPortal = true }) => {\n  const [isClosing, setIsClosing] = useState<boolean>(false)\n  const timerRef = useRef<ReturnType<typeof setTimeout>>()\n\n  const handleClose = useCallback(() => {\n    if (onClose) {\n      setIsClosing(true)\n      timerRef.current = setTimeout(() => {\n        onClose()\n        setIsClosing(false)\n      }, CLOSING_DELAY)\n    }\n  }, [onClose])\n\n  const handleContentClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation()\n  }, [])\n\n  const onKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key === 'Escape') {\n      handleClose()\n    }\n  }, [handleClose])\n\n  useEffect(() => {\n    if (isOpen) {\n      window.addEventListener('keydown', onKeyDown)\n    }\n\n    return () => {\n      clearTimeout(timerRef.current)\n      window.removeEventListener('keydown', onKeyDown)\n    }\n  }, [isOpen, onKeyDown])\n\n  const mods: Record<string, boolean | undefined> = {\n    [styles.opened]: isOpen,\n    [styles.isClosing]: isClosing\n  }\n\n  return (\n    <Portal element={document.getElementById('app') ?? undefined}>\n      <div className={classNames([styles.modal, className], mods)}>\n        <div className={styles.overlay} onClick={handleClose}>\n          <div\n            className={styles.content}\n            onClick={handleContentClick}\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    </Portal>\n  )\n}\n"],"names":[],"sourceRoot":""}