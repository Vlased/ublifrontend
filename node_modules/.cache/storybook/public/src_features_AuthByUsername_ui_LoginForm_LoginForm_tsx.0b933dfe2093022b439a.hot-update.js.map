{"version":3,"file":"src_features_AuthByUsername_ui_LoginForm_LoginForm_tsx.0b933dfe2093022b439a.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAGA;AAEA;AAEA","sources":["webpack://ulbi/./src/features/AuthByUsername/ui/LoginForm/LoginForm.tsx"],"sourcesContent":["import { loginActions, loginReducer } from '../../model/slice/loginSlice'\nimport { memo, useCallback } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useSelector } from 'react-redux'\nimport { Button, ButtonTheme } from 'shared/ui/Button/Button'\nimport { Input } from 'shared/ui/Input/Input'\nimport styles from './LoginForm.module.scss'\nimport { loginByUsername } from '../../model/services/loginByUsername/loginByUsername'\nimport { useAppDispatch } from 'shared/lib/hooks/useAppDispatch'\nimport { Text, TextTheme } from 'shared/ui/Text/Text'\nimport { getLoginUsername } from '../../model/selectors/getLoginUsername'\nimport { getLoginPassword } from '../../model/selectors/getLoginPassword'\nimport { getLoginLoading } from '../../model/selectors/getLoginLoading'\nimport { getLoginError } from '../../model/selectors/getLoginError'\nimport DynamicModuleLoader, { ReducersList } from 'shared/lib/components/DynamicModuleLoader/DynamicModuleLoader'\n\nconst initialReducers: ReducersList = {\n  loginForm: loginReducer\n}\n\nconst LoginForm = memo(() => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const username = useSelector(getLoginUsername)\n  const password = useSelector(getLoginPassword)\n  const isLoading = useSelector(getLoginLoading)\n  const error = useSelector(getLoginError)\n\n  console.log('username: ', username, password)\n\n  const handleUsernameChange = useCallback((value: string) => {\n    dispatch(loginActions.setUsername(value))\n  }, [dispatch])\n\n  const handlePasswordChange = useCallback((value: string) => {\n    dispatch(loginActions.setPassword(value))\n  }, [dispatch])\n\n  const handleLoginClick = useCallback(() => {\n    dispatch(loginByUsername({ username, password }))\n  }, [dispatch, username, password])\n\n  return (\n    <DynamicModuleLoader\n      reducers={initialReducers}\n      removeAfterUnmount\n    >\n      <div className={styles.loginForm}>\n        <Text title=\"Authorization\" />\n        <Input\n          type=\"text\"\n          value={username}\n          onChange={handleUsernameChange}\n          placeholder={t('Username')}\n          autoFocus\n        />\n        <Input\n          type=\"text\"\n          value={password}\n          onChange={handlePasswordChange}\n          placeholder={t('Password')}\n        />\n        {error && <Text theme={TextTheme.ERROR}>{error}</Text>}\n        <Button\n          theme={ButtonTheme.OUTLINED}\n          className={styles.loginButton}\n          onClick={handleLoginClick}\n          disabled={isLoading}\n        >\n          {t('Enter')}\n        </Button>\n      </div>\n    </DynamicModuleLoader>\n  )\n})\n\nLoginForm.displayName = 'LoginForm'\n\nexport default LoginForm\n"],"names":[],"sourceRoot":""}